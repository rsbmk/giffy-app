{"version":3,"sources":["services/settings.js","context/GifsContext.js","services/getGifs.js","hooks/useGifsSearch.js","componets/Gif/index.js","componets/Spinner/index.js","componets/GifList/index.js","componets/Search/index.js","componets/Header/index.js","hooks/useNearScreen.js","componets/TrendingSearches/index.js","pages/Home/index.js","pages/SearchResults/index.js","pages/Detail/index.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL","API_KEY","URL_API_TRENDING","useApiUrl","keyword","page","API_URL_SEARCH","$api_url","Context","React","createContext","GifsContextProvider","children","useState","gifs","setGifs","Provider","value","GetGifs","fetch","then","response","json","responseApi","resApi","data","map","gif","title","id","url","images","downsized_medium","useGifsSearch","useContext","GifsContext","loading","setLoading","setPage","useEffect","getGifs","nextGifs","preGifs","concat","Gif","to","className","src","alt","Spinner","GifList","decodeURI","Search","keywordInput","setKeywordInput","useLocation","setLocation","onSubmit","evt","preventDefault","onChange","target","placeholder","Header","stateDarkMode","setStateDarkMode","onClick","_","tagBody","document","body","classList","toggle","contains","useNearScrean","once","isNearScreen","setShow","elementOfObserver","useRef","observer","IntersectionObserver","entries","isIntersecting","disconnect","rootMargin","observe","current","TreandingTopics","lazy","LeazyTrending","ref","fallback","Home","SearchResults","params","debounceHandleNextPage","useCallback","debounce","prePage","DetailGif","find","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e950e502.chunk.js","sourcesContent":["export const API_URL = \"https://api.giphy.com/v1\";\r\nexport const API_KEY = \"7XIrr16tQKMClBgk5uWHFjHbowtammMS\";\r\nconst URL_API_TRENDING = `${API_URL}/gifs/trending?api_key=${API_KEY}&limit=25&rating=g`;\r\n\r\nexport function useApiUrl(keyword, page) {\r\n  const API_URL_SEARCH = `${API_URL}/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=10&offset=${\r\n    page * 10\r\n  }&rating=g&lang=en`;\r\n\r\n  const $api_url = keyword ? API_URL_SEARCH : URL_API_TRENDING;\r\n  return { $api_url };\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nconst Context = React.createContext({});\r\n\r\nexport function GifsContextProvider({ children }) {\r\n  const [gifs, setGifs] = useState([]);\r\n\r\n  return (\r\n    <Context.Provider value={{ gifs, setGifs }}>{children}</Context.Provider>\r\n  );\r\n}\r\n\r\nexport default Context;\r\n","import { useApiUrl } from \"../services/settings\";\r\n\r\nexport default function GetGifs(keyword, page) {\r\n  const { $api_url } = useApiUrl(keyword, page);\r\n\r\n  const gifs = fetch($api_url)\r\n    .then((response) => response.json())\r\n    .then(responseApi);\r\n\r\n  return gifs;\r\n}\r\n\r\nconst responseApi = (resApi) => {\r\n  const { data = [] } = resApi;\r\n\r\n  const gifs = data.map((gif) => {\r\n    const { title, id, images } = gif;\r\n    const { url } = images.downsized_medium;\r\n    return { title, id, url };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport getGifs from \"../services/getGifs\";\r\nimport GifsContext from \"../context/GifsContext\";\r\n\r\nconst INITIAL_PAGE = 0;\r\n\r\nexport default function useGifsSearch(keyword) {\r\n  const { gifs, setGifs } = useContext(GifsContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [page, setPage] = useState(INITIAL_PAGE);\r\n\r\n  useEffect(\r\n    function () {\r\n      setLoading(true);\r\n      getGifs(keyword).then((gifs) => {\r\n        setGifs(gifs);\r\n        setLoading(false);\r\n      });\r\n    },\r\n    [keyword, setGifs]\r\n  );\r\n\r\n  useEffect(\r\n    function () {\r\n      if (page === INITIAL_PAGE) return;\r\n\r\n      getGifs(keyword, page).then((nextGifs) => {\r\n        setGifs((preGifs) => preGifs.concat(nextGifs));\r\n      });\r\n    },\r\n    [page, keyword, setGifs]\r\n  );\r\n  return { gifs, loading, setPage };\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"wouter\";\r\nimport \"./styles.css\";\r\n\r\nexport function Gif({ title, url, id }) {\r\n  return (\r\n    <Link to={`/giffy-app/gifs/detail/${id}`}>\r\n      <div className=\"wrapImgGif\">\r\n        <img className=\"imgGif\" loading=\"lazy\" src={url} alt={title} />\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport default function Spinner() {\r\n  return <div className=\"spinner\"></div>;\r\n}\r\n","import React from \"react\";\r\nimport useGifsSearch from \"../../hooks/useGifsSearch\";\r\nimport { Gif } from \"../Gif\";\r\nimport Spinner from \"../Spinner\";\r\nimport \"./styles.css\";\r\n\r\nexport default function GifList({ keyword }) {\r\n  const { gifs, loading } = useGifsSearch(keyword);\r\n\r\n  return (\r\n    <div className=\"containerGifList\">\r\n      {keyword ? (\r\n        <h2 className=\"tittleGifList\">{decodeURI(keyword)}</h2>\r\n      ) : (\r\n        <h2 className=\"tittleGifList\">\r\n          Trending <i className=\"fas fa-chart-line\"></i>\r\n        </h2>\r\n      )}\r\n\r\n      <div className=\"wrpaListOfGifs\">\r\n        {loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          gifs.map((gifs) => {\r\n            return (\r\n              <Gif\r\n                key={gifs.id}\r\n                id={gifs.id}\r\n                title={gifs.title}\r\n                url={gifs.url}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useLocation } from \"wouter\";\r\nimport \"./styles.css\";\r\n\r\nexport default function Search() {\r\n  const [keywordInput, setKeywordInput] = useState(\"\");\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [location, setLocation] = useLocation();\r\n\r\n  const handleChange = (evt) => {\r\n    setKeywordInput(evt.target.value);\r\n  };\r\n  const handleSumbit = (evt) => {\r\n    evt.preventDefault();\r\n    setLocation(`/giffy-app/gifs/${keywordInput}`);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"wrapInputSearch\"\r\n      onSubmit={handleSumbit}\r\n      value={keywordInput}\r\n    >\r\n      <label>\r\n        <i className=\"fas fa-search\"></i>\r\n      </label>\r\n      <input\r\n        className=\"inputSearch\"\r\n        onChange={handleChange}\r\n        placeholder=\"Search you favorite gifs ...\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"wouter\";\r\nimport Search from \"../Search\";\r\nimport \"./styles.css\";\r\n\r\nexport function Header() {\r\n  const [stateDarkMode, setStateDarkMode] = useState(false);\r\n\r\n  const handleClick = (_) => {\r\n    const tagBody = document.body.classList;\r\n    tagBody.toggle(\"isDarkMode\");\r\n    setStateDarkMode(tagBody.contains(\"isDarkMode\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"containerHeader\">\r\n      <div className=\"wrapTitle-DarkMode\">\r\n        <Link className=\"title\" to=\"/giffy-app/\">\r\n          Giffy\r\n        </Link>\r\n        <div className=\"wrapDarkMode\" onClick={handleClick}>\r\n          {stateDarkMode ? (\r\n            <i className=\"fas fa-sun\" />\r\n          ) : (\r\n            <i className=\"far fa-moon\" />\r\n          )}\r\n          DarkMode\r\n        </div>\r\n      </div>\r\n      <Search />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function useNearScrean({once = true}= {}) {\r\n  const [isNearScreen, setShow] = useState(false);\r\n  const elementOfObserver = useRef();\r\n\r\n  useEffect(function () {\r\n    const handleOnChange = (entries, observer) => {\r\n      const element = entries[0];\r\n      if (element.isIntersecting) {\r\n        setShow(true);\r\n        once && observer.disconnect();\r\n      }else{\r\n        !once && setShow(false)\r\n      }\r\n    };\r\n\r\n    const observer = new IntersectionObserver(handleOnChange, {\r\n      rootMargin: \"200px\",\r\n    });\r\n\r\n    observer.observe(elementOfObserver.current);\r\n\r\n    return () => observer.disconnect();\r\n  }, []);\r\n\r\n  return { isNearScreen, elementOfObserver };\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport useNearScrean from \"../../hooks/useNearScreen\";\r\nconst TreandingTopics = React.lazy(() => import(\"../TrendingTopics\"));\r\n\r\nexport default function LeazyTrending() {\r\n  const { isNearScreen, elementOfObserver } = useNearScrean();\r\n\r\n  return (\r\n    <div ref={elementOfObserver}>\r\n      <Suspense fallback={null}>\r\n        {isNearScreen ? <TreandingTopics /> : null}\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport GifList from \"../../componets/GifList\";\r\nimport Header from \"../../componets/Header\";\r\nimport TreandingTerms from \"../../componets/TrendingSearches\";\r\n\r\nexport function Home() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"wrpaHome\">\r\n        <GifList />\r\n        <TreandingTerms />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport GifList from \"../../componets/GifList\";\r\nimport Header from \"../../componets/Header\";\r\nimport useGifsSearch from \"../../hooks/useGifsSearch\";\r\nimport useNearScrean from \"../../hooks/useNearScreen\";\r\nimport debounce from 'just-debounce-it'\r\n\r\nexport function SearchResults({ params }) {\r\n  const { setPage } = useGifsSearch(params.keyword);\r\n  const {isNearScreen, elementOfObserver } = useNearScrean({once: false})\r\n \r\n  const debounceHandleNextPage = useCallback(debounce(\r\n    () => setPage((prePage) => prePage + 1), 500\r\n  ),[]) \r\n\r\n  useEffect(function () {\r\n    if (isNearScreen) debounceHandleNextPage()\r\n  },[debounceHandleNextPage,isNearScreen])\r\n\r\n\r\n  return (\r\n    <div className=\"wrapSearchResults\">\r\n      <Header />\r\n      <GifList keyword={params.keyword} />\r\n      <div ref={elementOfObserver}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { useContext } from \"react\";\r\nimport { Gif } from \"../../componets/Gif\";\r\nimport Header from \"../../componets/Header\";\r\nimport GifsContext from \"../../context/GifsContext\";\r\nimport \"./style.css\";\r\n\r\nexport default function DetailGif({ params }) {\r\n  const { gifs } = useContext(GifsContext);\r\n\r\n  const { title, id, url } = gifs.find((gif) => gif.id === params.id);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"containerGifDetali\">\r\n        <h2 className=\"titleGifDetail\">{title}</h2>\r\n        <Gif title={title} id={id} url={url} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { GifsContextProvider } from \"./context/GifsContext\";\r\nimport { Route } from \"wouter\";\r\nimport Home from \"./pages/Home\";\r\nimport SearchResults from \"./pages/SearchResults\";\r\nimport DetailGif from \"./pages/Detail\";\r\n\r\nfunction App() {\r\n  return (\r\n    <GifsContextProvider>\r\n      <Route path=\"/giffy-app/\" component={Home} />\r\n      <Route path=\"/giffy-app/gifs/:keyword\" component={SearchResults} />\r\n      <Route path=\"/giffy-app/gifs/detail/:id\" component={DetailGif} />\r\n    </GifsContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}